pipeline {
    agent any
    parameters {
        booleanParam(name: 'IsSonar', defaultValue: false, description: 'Toggle this value')
    }    
    
    stages {
        stage('source'){
            steps {
            git credentialsId: 'jenkins2-ssh', url: 'https://github.com/KcodeHub/simple-java-maven-app.git'       
            }
        }
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Analysis') {
            when {
                expression {params.IsSonar == true}
            }
            steps {
                script {   
                withSonarQubeEnv('Local SonarQube') {
                    sh "/opt/sonar-runner/bin/sonar-runner -X -e"
                }
                step([$class: 'JacocoPublisher',
                        execPattern:'**/**.exec',
                        classPattern: '**/classes/main/com**', 
                        sourcePattern: '**/src/main/java/com**â€™, 
                        exclusionPattern: '**/*Test*.class']) 
                    
                    timeout(time: 1, unit: 'HOURS') { 
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                }
                }
            }
        }
        }        
          
    }
